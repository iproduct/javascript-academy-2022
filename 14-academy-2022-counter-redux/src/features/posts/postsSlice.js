import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import blogsApiClient from '../../service/blogs-api-client';

const initialState = {
  posts: [],
  currentPostId: undefined,
  loading: false,
  errors: undefined,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchPosts = createAsyncThunk(
  'posts/fetchPosts',
  async () => {
    // try{
      const posts = await blogsApiClient.fetchPosts();
      // The value we return becomes the `fulfilled` action payload
      return posts;
    // } catch(err) {
      // return rejectWithValue(err)
    // }
  }
);

export const fetchPostById = createAsyncThunk(
  'posts/fetchPostById',
  async (postId, { rejectWithValue }) => {
    try{
      const post = await blogsApiClient.fetchPostById(postId);
      // The value we return becomes the `fulfilled` action payload
      return post;
    } catch(err) {
      return rejectWithValue(err)
    }
  }
);

export const postsSlice = createSlice({
  name: 'posts',
  initialState,
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers:  {
    [fetchPosts.pending]: (state, action) => {
      state.errors = undefined;
      state.loading = true;
    },
    [fetchPosts.fulfilled]: (state, action) => {
      state.loading = false;
      state.posts 
      = action.payload;
    },
    [fetchPosts.rejected]: (state, action) => {
      state.loading = false;
      state.errors = action.payload;
    },
    [fetchPostById.pending]: (state, action) => {
      state.errors = undefined;
      state.fetchedPostId = action.payload;
      state.loading = true;
    },
    [fetchPostById.fulfilled]: (state, action) => {
      state.loading = false;
      const post = action.payload;
      const index = state.posts.findIndex(p => p.id === post.id);
      if(index >= 0) {
        state.posts[index] = post;
      } else {
        state.posts.push(post);
      }
    },
    [fetchPostById.rejected]: (state, action) => {
      state.loading = false;
      state.errors = action.payload;
    },
  },
  
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAllPosts = (state) => state.posts.posts;
export const selectCurrentPost = (state) => state.posts.posts?.[state.posts.currentPostId];
export const selectErrors = (state) => state.posts.errors;
export const selectPending = (state) => state.posts.loading;


// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default postsSlice.reducer;
